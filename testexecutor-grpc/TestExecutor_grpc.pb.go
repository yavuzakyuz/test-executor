// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: TestExecutor.proto

package testexecutor_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestExecutor_StartHandshake_FullMethodName = "/testgrpc.TestExecutor/StartHandshake"
	TestExecutor_ReceiveTask_FullMethodName    = "/testgrpc.TestExecutor/ReceiveTask"
)

// TestExecutorClient is the client API for TestExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for handling workers and tasks
type TestExecutorClient interface {
	StartHandshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error)
	ReceiveTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskResponse, error)
}

type testExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewTestExecutorClient(cc grpc.ClientConnInterface) TestExecutorClient {
	return &testExecutorClient{cc}
}

func (c *testExecutorClient) StartHandshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, TestExecutor_StartHandshake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testExecutorClient) ReceiveTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, TestExecutor_ReceiveTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestExecutorServer is the server API for TestExecutor service.
// All implementations must embed UnimplementedTestExecutorServer
// for forward compatibility.
//
// Service definition for handling workers and tasks
type TestExecutorServer interface {
	StartHandshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error)
	ReceiveTask(context.Context, *Empty) (*TaskResponse, error)
	mustEmbedUnimplementedTestExecutorServer()
}

// UnimplementedTestExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestExecutorServer struct{}

func (UnimplementedTestExecutorServer) StartHandshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHandshake not implemented")
}
func (UnimplementedTestExecutorServer) ReceiveTask(context.Context, *Empty) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveTask not implemented")
}
func (UnimplementedTestExecutorServer) mustEmbedUnimplementedTestExecutorServer() {}
func (UnimplementedTestExecutorServer) testEmbeddedByValue()                      {}

// UnsafeTestExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestExecutorServer will
// result in compilation errors.
type UnsafeTestExecutorServer interface {
	mustEmbedUnimplementedTestExecutorServer()
}

func RegisterTestExecutorServer(s grpc.ServiceRegistrar, srv TestExecutorServer) {
	// If the following call pancis, it indicates UnimplementedTestExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestExecutor_ServiceDesc, srv)
}

func _TestExecutor_StartHandshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestExecutorServer).StartHandshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestExecutor_StartHandshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestExecutorServer).StartHandshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestExecutor_ReceiveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestExecutorServer).ReceiveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestExecutor_ReceiveTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestExecutorServer).ReceiveTask(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TestExecutor_ServiceDesc is the grpc.ServiceDesc for TestExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testgrpc.TestExecutor",
	HandlerType: (*TestExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartHandshake",
			Handler:    _TestExecutor_StartHandshake_Handler,
		},
		{
			MethodName: "ReceiveTask",
			Handler:    _TestExecutor_ReceiveTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TestExecutor.proto",
}
